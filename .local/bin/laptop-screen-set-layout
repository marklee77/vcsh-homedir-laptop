#!/bin/bash
xrandr="/usr/bin/xrandr"

# laptop_screen_name defaults to first connected output, but could be set
# explicitly
laptop_screen_name=$(xrandr --current | \
                     perl -lane 'print $F[0] if $F[1] eq "connected"' | \
                     head -1)
lid_state=$(perl -ane 'print $F[1]' /proc/acpi/button/lid/LID/state)
layout="$1"

if [ -n "$layout" ]; then
    case $layout in 
        mirror|left-of|right-of|above|below|off)
        ;;
        *)
        echo -e "usage:\n$0 [mirror|left-of|right-of|above|below|off]"
        exit 1
        ;;
    esac
fi

scriptname="$(basename $0)"

lockdir="${XDG_RUNTIME_DIR:-${HOME}/.local/var}/${scriptname}.lock"
pidfile="${lockdir}/PID"
if mkdir ${lockdir} &> /dev/null; then
    trap "rm -rf ${lockdir}; exit 0" EXIT SIGHUP SIGINT SIGQUIT SIGTERM
    echo "$$" > ${pidfile}
else
    otherpid=$(cat ${pidfile} 2>/dev/null)
    othercmd=$(ps --no-headers --format command --pid ${otherpid} 2>/dev/null)
    if [[ "${othercmd}" =~ .*${scriptname}.* ]]; then
        echo "another instance of ${scriptname} is currently running." >&2
        exit 1
    fi
    # lock is stale, remove and try again...
    rm -rf ${lockdir}
    exec "$0" "$@"
fi

logdir="${HOME}/.local/var/log"
mkdir -p ${logdir}

logfile="${logdir}/${scriptname}.log"
exec 1>${logfile}
exec 2>&1

scriptdir="$(dirname $0)"
export PATH="${scriptdir}:$PATH"

output_status_list=$(xrandr --current | perl -ane 'if (/(\S+)\s+((?:dis)?connected)\s*((?:primary)?)\s*([^\s(+]*)/) { print "\n$1,$2,$3,$4,"; } elsif (/^\s+(\d+x\d+)\s+[0-9.*]+(\+?)/) { print "$1$2;" };')

global_available_modes=""
num_active_outputs=0
for output_status in $output_status_list; do
    IFS="," read output_name output_state output_primary output_mode output_available_modes <<< "${output_status}"
    if [ -n "${output_available_modes}" ] && \
       [ "$output_state" = "connected" ] && \
       ([ "$output_name" != "$laptop_screen_name" ] || \
        [ "$lid_state" = "open" ]); then
        num_active_outputs=$(($num_active_outputs+1))
        if [ $num_active_outputs -eq 1 ]; then
            global_available_modes=${output_available_modes//[;+]/ }
        else
            temp_available_modes=""
            for gmode in $global_available_modes; do
                for omode in ${output_available_modes//[;+]/ }; do
                    if [ "$omode" = "$gmode" ]; then
                        temp_available_modes="$temp_available_modes $omode"
                        break
                    fi
                done
            done
            global_available_modes=$temp_available_modes
        fi
    fi
done
global_preferred_mode=$(perl -lane 'print $F[0]' <<< $global_available_modes)

xrandr_options=""
previous_connected_output=""
for output_status in $output_status_list; do
    IFS="," read output_name output_state output_primary output_mode output_available_modes <<< "${output_status}"
    output_desired_mode=$(perl -lane 'if (/(\d+x\d+)\+/) { print $1; } else { print $F[0]; }' <<< ${output_available_modes//;/ })
    output_options=""
    if [ "$output_state" = "connected" ] && ([ "$output_name" != "$laptop_screen_name" ] || [ "$lid_state" = "open" ] || [ $num_active_outputs -eq 0 ] || [ "$layout" = "off" ]); then
        if [ -z "$output_primary" ] && [ -z "$previous_connected_output" ]; then
            output_options="--primary"
        fi
        if [ $num_active_outputs -gt 1 ]; then
            if [ "$layout" = "mirror" ]; then
                if [ -n "$global_preferred_mode" ]; then 
                    output_desired_mode=$global_preferred_mode
                fi
                if [ -n "$previous_connected_output" ]; then
                    output_options="--same-as $previous_connected_output"
                fi
            elif [ "$layout" = "off" ]; then
                if [ -n "$output_mode" ] && [ -n "$previous_connected_output" ]; then
                    output_options="--off"
                fi
            elif [ -n "$layout" ]; then
                if [ -n "$previous_connected_output" ]; then
                    output_options="--$layout $previous_connected_output"
                fi
            fi
        fi
        if [ "$layout" != "off" ] || [ -z "$previous_connected_output" ]; then
            if [ "$output_mode" != "$output_desired_mode" ]; then
                if [ -n "$output_desired_mode" ]; then
                    output_options="--mode $output_desired_mode $output_options"
                fi
                if [ -z "$output_mode" ]; then
                    output_options="--auto $output_options"
                fi
            fi
        fi
        previous_connected_output=$output_name
    elif [ -n "$output_mode" ]; then
        if [ "$output_name" = "$laptop_screen_name" ]; then
            output_options="--off"
        else
            output_options="--auto"
        fi
    fi
    if [ -n "$output_options" ]; then 
        xrandr_options="$xrandr_options --output $output_name $output_options"
    fi
done

rundir="${HOME}/.local/var/run/${scriptname}"
if [ -n "$xrandr_options" ]; then
    mkdir -p ${rundir}
    xrandr_command="$xrandr$xrandr_options"
    previous_xrandr_command=$(cat ${rundir}/xrandr_command 2>/dev/null)
    if  [ "$xrandr_command" != "$previous_xrandr_command" ]; then
        echo "$xrandr_command" > ${rundir}/xrandr_command
        $xrandr_command 
        # sometimes resetting the screen will undo keyboard mapping
        if which laptop-keyboard-set-layout 2>/dev/null; then
            laptop-keyboard-set-layout
        fi
        if which laptop-volume-set 2>/dev/null; then
            laptop-volume-set
        fi
    fi
elif [ -f "${rundir}/xrandr_command" ]; then
    rm -f ${rundir}/xrandr_command
fi    

exit 0
